openapi: 3.0.3
info:
  title: Swagger [Project name] - OpenAPI 3.0
  description: |-
  version: 1.0.12
servers:
  - url: "/"
tags:
  - name: order
    description: Operations related to Orders
  - name: payment
    description: Operations related to Payments
  - name: employee
    description: Operations related to Employee management
  - name: giftCard
    description: Operations related to GiftCard management
  - name: restaurant
    description: Operations related to Restaurant management
  - name: auth
    description: Authentication and Authorization

paths:
  /auth/token:
    post:
      tags:
        - auth
      summary: Generate access token for customers, managers, or admins
      description: Authenticates the user and generates a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user_name"
                password:
                  type: string
                  format: password
                  example: "password"
              required:
                - username
                - password
      responses:
        "200":
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The JWT token to be used for subsequent authenticated requests
        "401":
          description: Unauthorized, invalid credentials
        "500":
          description: Internal server error

  /orders:
    post:
      tags:
        - order
      summary: Create a new order
      description: Employee creates a new order for a customer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
                  description: ID of the customer placing the order
                items:
                  type: array
                  description: List of items in the order
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                        description: Product ID
                      quantity:
                        type: integer
                        description: Quantity of the product
                discount_id:
                  type: string
                  description: Optional discount applied to the order
              required:
                - customer_id
                - items
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: string
                    description: ID of the created order
        "400":
          description: Invalid input data
        "500":
          description: Internal server error

  /orders/{order_id}:
    put:
      tags:
        - order
      summary: Modify an open order
      description: Employee modifies the items or discount in an open order.
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            description: The ID of the order to modify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  description: List of items in the order
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                        description: Product ID
                      quantity:
                        type: integer
                        description: Quantity of the product
                discount_id:
                  type: string
                  description: Optional discount applied to the order
      responses:
        "200":
          description: Order updated successfully
        "400":
          description: Invalid input or order status not open
        "404":
          description: Order not found
        "500":
          description: Internal server error

    delete:
      tags:
        - order
      summary: Cancel an open order
      description: Employee cancels an open order. Closed or paid orders cannot be canceled.
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            description: The ID of the order to cancel
      responses:
        "200":
          description: Order canceled successfully
        "400":
          description: Order is not open or already paid
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /payments:
    post:
      tags:
        - payment
      summary: Process a payment for an order
      description: Processes a payment for an open order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: string
                  description: ID of the order being paid
                payments:
                  type: array
                  description: List of payments (split payments allowed)
                  items:
                    type: object
                    properties:
                      method:
                        type: string
                        enum: [Cash, Card, GiftCard]
                        description: Payment method
                      amount:
                        type: number
                        format: double
                        description: Amount paid
                      gift_card_code:
                        type: string
                        description: Gift card code, required if the method is GiftCard
              required:
                - order_id
                - payments
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  receipt_url:
                    type: string
                    description: URL to the final receipt
        "400":
          description: Invalid payment details or order status not open
        "500":
          description: Internal server error

  /employees:
    post:
      tags:
        - employee
      summary: Create a new employee
      description: Creates a new employee and puts data into EmployeeAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: First name of the employee
                surname:
                  type: string
                  description: Last name of the employee
                userTypeEnum:
                  type: integer
                  description: User type enum from UserTypeEnum
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the employee belongs to
              required:
                - name
                - surname
                - userTypeEnum
                - business_id
      responses:
        "201":
          description: Employee created successfully
        "400":
          description: Invalid employee data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - employee
      summary: Retrieve a list of employees that currently working
      description: Fetches a list of employees. **Access restricted to users with admin or manager roles**.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter employees by their first name
          required: false
          schema:
            type: string
        - name: surname
          in: query
          description: Filter employees by their last name
          required: false
          schema:
            type: string
        - name: userTypeEnum
          in: query
          description: Filter employees by their user type enum
          required: false
          schema:
            type: integer
        - name: businessId
          in: query
          description: Filter employees by business ID
          required: false
          schema:
            type: string
            format: uuid
        - name: userType
          in: query
          description: User type enum value
          required: false
          schema:
            type: integer
        - name: workingFromFrom
          in: query
          description: Filter out by date (working from (from date))
          required: false
          schema:
            type: string
            format: date
        - name: workingFromTo
          in: query
          description: Filter out by date (working from (to date))
          required: false
          schema:
            type: string
            format: date
        - name: email
          in: query
          description: Filter out by email
          required: false
          schema:
            type: string
            format: email
      responses:
        "200":
          description: A list of employees retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique ID of the employee
                    name:
                      type: string
                      description: First name of the employee
                    surname:
                      type: string
                      description: Last name of the employee
                    userTypeEnum:
                      type: integer
                      description: User type enum from UserTypeEnum
                    business_id:
                      type: string
                      format: uuid
                      description: ID of the business the employee belongs to
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /employees/{employeeId}:
    get:
      tags:
        - employee
      summary: Retrieve a single employee by ID
      description: Fetches an employee's details based on the provided employee ID. **Access restricted to users with admin or manager roles**.
      parameters:
        - name: employeeId
          in: path
          required: true
          description: Unique identifier of the employee
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Employee details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique ID of the employee
                  name:
                    type: string
                    description: First name of the employee
                  surname:
                    type: string
                    description: Last name of the employee
                  userTypeEnum:
                    type: integer
                    description: User type enum from UserTypeEnum
                  createdAt:
                    type: string
                    format: date-time
                    description: Created at date and time
                  userName:
                    type: string
                    description: Employee's user name
                  userId:
                    type: string
                    format: uuid
                    description: Employee's user Id for navigation
                  business_id:
                    type: string
                    format: uuid
                    description: ID of the business the employee belongs to
        "400":
          description: Invalid request
        "404":
          description: Employee not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - employee
      summary: Update existing employee
      description: Updates existing employee and puts old data into EmployeeAudit table with DB triggers. **Access restricted to users with admin or manager roles**. **Only admin users** can add the `business_id`.
      parameters:
        - name: employeeId
          in: path
          required: true
          description: Unique identifier of the employee
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: First name of the employee
                surname:
                  type: string
                  description: Last name of the employee
                userTypeEnum:
                  type: integer
                  description: User type enum from UserTypeEnum
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the employee belongs to
              anyOf: # At least one field from the list must be present
                - required:
                    - name
                - required:
                    - surname
                - required:
                    - userTypeEnum
                - required:
                    - business_id
      responses:
        "200":
          description: Employee edited successfully
        "400":
          description: Invalid employee data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "404":
          description: Original employee not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - employee
      summary: Delete employee from working DB table
      description: Deletes employee data from working table and puts old data into EmployeeAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      parameters:
        - name: employeeId
          in: path
          required: true
          description: Unique identifier of the employee
          schema:
            type: string
      responses:
        "204":
          description: Employee removed successfully
        "400":
          description: Invalid request
        "404":
          description: Employee not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /giftCard:
    post:
      tags:
        - giftCard
      summary: Create a new gift card
      description: Creates a new gift card and puts data into GiftCardAudit table with DB triggers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  format: double
                  description: Price of the gift card
                validTo:
                  type: string
                  format: date
                  description: Gift card valid to date
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the employee belongs to
              required:
                - number
                - business_id
      responses:
        "201":
          description: Gift card created successfully
        "400":
          description: Invalid gift card data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - giftCard
      summary: Retrieve a list of gift cards
      description: Fetches a list of gift cards.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter gift cards by their price
          required: false
          schema:
            type: number
            format: double
        - name: code
          in: query
          description: Filter gift cards by their code
          required: false
          schema:
            type: string
        - name: validTo
          in: query
          description: Filter gift cards by their valid to date
          required: false
          schema:
            type: string
            format: date
        - name: businessId
          in: query
          description: Filter gift cards by business ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of gift cards retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the gift card
                    price:
                      type: number
                      format: double
                      description: Price of the gift card
                    code:
                      type: string
                      description: Code of the gift card
                    validTo:
                      type: string
                      format: date
                      description: Valid to date
                    business_id:
                      type: string
                      format: uuid
                      description: ID of the business the gift card belongs to
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /giftCard/{giftCardId}:
    get:
      tags:
        - giftCard
      summary: Retrieve a single giftCard by ID
      description: Fetches an gift card's details based on the provided gift card ID.
      parameters:
        - name: giftCardId
          in: path
          required: true
          description: Unique identifier of the gift card
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Gift card details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique ID of the gift card
                  price:
                    type: number
                    format: double
                    description: Price of the gift card
                  code:
                    type: string
                    description: Code of the gift card
                  validTo:
                    type: string
                    format: date
                    description: Valid to date
                  createdAt:
                    type: string
                    format: date-time
                    description: Created at date and time
                  createdByName:
                    type: string
                    description: Employee's name who created gift card
                  createdById:
                    type: string
                    format: uuid
                    description: Employee's id who created gift card
                  business_id:
                    type: string
                    format: uuid
                    description: ID of the business the gift card belongs to
        "400":
          description: Invalid request
        "404":
          description: Gift card not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - giftCard
      summary: Update existing gift card
      description: Updates existing gift card and puts old data into GiftCardAudit table with DB triggers. **Only admin users** can add the `business_id`.
      parameters:
        - name: giftCardId
          in: path
          required: true
          description: Unique identifier of the gift card
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  format: double
                  description: Price of the gift card
                code:
                  type: string
                  description: Code of the gift card
                validTo:
                  type: string
                  format: date
                  description: Valid to date
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the gift card belongs to
              anyOf: # Requires at least one field from the following
                - required:
                    - price
                - required:
                    - code
                - required:
                    - validTo
                - required:
                    - business_id
      responses:
        "200":
          description: Gift card edited successfully
        "400":
          description: Invalid gift card data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original gift card not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - giftCard
      summary: Delete gift card from working DB table
      description: Deletes gift card data from working table and puts old data into GiftCardAudit table with DB triggers. **Access restricted to users with Manager or Admin role**.
      parameters:
        - name: giftCardId
          in: path
          required: true
          description: Unique identifier of the gift card
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Gift card removed successfully
        "400":
          description: Invalid request
        "404":
          description: Gift card not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /restaurant:
    post:
      tags:
        - restaurant
      summary: Create new restaurant
      description: Creates a new restaurant entity and puts data into RestaurantAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Restaurant name
                country:
                  type: string
                  description: Country name
                city:
                  type: string
                  description: City name
                street:
                  type: string
                  description: Street name
                number:
                  type: string
                  description: House number
                postCode:
                  type: string
                  description: Post code
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the employee belongs to
              required:
                - name
                - country
                - city
                - street
                - number
                - postCode
                - business_id
      responses:
        "201":
          description: Restaurant card created successfully
        "400":
          description: Invalid restaurant data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin or manager)
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - restaurant
      summary: Retrieve a list of business's restaurants
      description: Fetches a list of restaurants. **Only admin users** can add the `business_id`.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter restaurant by their name
          required: false
          schema:
            type: string
        - name: code
          in: query
          description: Filter restaurants by their code
          required: false
          schema:
            type: integer
        - name: country
          in: query
          description: Filter restaurants by their country
          required: false
          schema:
            type: string
        - name: city
          in: query
          description: Filter restaurants by city
          required: false
          schema:
            type: string
        - name: street
          in: query
          description: Filter restaurants by street
          required: false
          schema:
            type: string
        - name: number
          in: query
          description: Filter restaurants by number
          required: false
          schema:
            type: string
        - name: postCode
          in: query
          description: Filter restaurants by postCode
          required: false
          schema:
            type: string
        - name: businessId
          in: query
          description: Filter restaurants by business **(only admin)**
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of restaurants retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the restaurant
                    name:
                      type: string
                      description: Name of the restaurant
                    code:
                      type: string
                      description: Code of the restaurant
                    fullAddress:
                      type: string
                      description: Full address of the restaurant
                    business_id:
                      type: string
                      format: uuid
                      description: ID of the business the restaurant belongs to
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /restaurant/{restaurantId}:
    get:
      tags:
        - restaurant
      summary: Retrieve a single restaurant by ID
      description: Fetches an restaurant's details based on the provided restaurant ID.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Unique identifier of the restaurant
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Restaurant details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique ID of the restaurant
                  code:
                    type: string
                    description: Code of the restaurant
                  name:
                    type: string
                    description: Name of the restaurant
                  country:
                    type: string
                    description: Country of the restaurant
                  city:
                    type: string
                    description: City of the restaurant
                  street:
                    type: string
                    description: Street of the restaurant
                  number:
                    type: string
                    description: Number of the restaurant
                  postCode:
                    type: string
                    description: Post code of the restaurant
                  addressId:
                    type: string
                    format: uuid
                    description: Address table's id
                  createdAt:
                    type: string
                    format: date-time
                    description: Created at date and time
                  createdByName:
                    type: string
                    description: Employee's name who created restaurant
                  createdById:
                    type: string
                    format: uuid
                    description: Employee's id who created restaurant
                  business_id:
                    type: string
                    format: uuid
                    description: ID of the business the restaurant belongs to
        "400":
          description: Invalid request
        "404":
          description: Restaurant not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - restaurant
      summary: Update existing restaurant
      description: Updates existing restaurant and puts old data into RestaurantAudit table with DB triggers. **Only admin users** can add the `business_id`.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Unique identifier of the restaurant
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the restaurant
                country:
                  type: string
                  description: Country of the restaurant
                city:
                  type: string
                  description: City of the restaurant
                street:
                  type: string
                  description: Street of the restaurant
                number:
                  type: string
                  description: Number of the restaurant
                postCode:
                  type: string
                  description: Post code of the restaurant
                addressId:
                  type: string
                  format: uuid
                  description: ID of the address' table
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the restaurant belongs to
              anyOf: # Requires at least one field from the following
                - required:
                    - name
                - required:
                    - country
                - required:
                    - city
                - required:
                    - street
                - required:
                    - number
                - required:
                    - postCode
                - required:
                    - business_id
      responses:
        "200":
          description: Restaurant edited successfully
        "400":
          description: Invalid restaurant data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original restaurant not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - restaurant
      summary: Delete restaurant from working DB table
      description: Deletes gift card data from working table and puts old data into RestaurantAudit table with DB triggers. **Access restricted to users with Admin role**.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Unique identifier of the restaurant
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Restaurant removed successfully
        "400":
          description: Invalid request
        "404":
          description: Restaurant not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error
