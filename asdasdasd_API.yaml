openapi: 3.0.3
info:
  title: Swagger [Project name] - OpenAPI 3.0
  description: |-
  version: 1.0.13
servers:
  - url: "/"
tags:
  - name: auth
    description: Authentication and Authorization
  - name: employee
    description: Operations related to Employee management
  - name: payment
    description: Operations related to Payments
  - name: discount
    description: Operations related to Discounts
  - name: giftCard
    description: Operations related to GiftCard management
  - name: restaurant
    description: Operations related to Restaurant management
  - name: reservation
    description: Operations related to Reservation management
  - name: product
    description: Operations related to Product management
  - name: user
    description: Operations related to User management
  - name: business
    description: Operations related to Business management
  - name: inventory
    description: Operations related to Inventory management
  - name: productVariation
    description: Operations related to order variations
  - name: order
    description: Operations related to Orders
  - name: sysparams
    description: Operations related to System parameters
  - name: tax
    description: Operations related to Taxes
  - name: locationProduct
    description: Operations related to Location product
  - name: customer
    description: Operations related to Customers
  - name: productTaxRow
    description: Operations related to Product Tax Row
  - name: serviceTaxRow
    description: Operations related to Service Tax Row
  - name: contactInfo
    description: Operations related to Contact info
  - name: service
    description: Operations related to services
  - name: locationBusiness
    description: Operations related to location business

paths:
  /auth/token:
    post:
      tags:
        - auth
      summary: Generate access token for customers, managers, or admins
      description: Authenticates the user and generates a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user_name"
                password:
                  type: string
                  format: password
                  example: "password"
              required:
                - username
                - password
      responses:
        "200":
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The JWT token to be used for subsequent authenticated requests
        "401":
          description: Unauthorized, invalid credentials
        "500":
          description: Internal server error

  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout the authenticated user
      description: Invalidates the user's JWT token and logs them out from the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: The JWT token to be invalidated
              required:
                - access_token
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      responses:
        "200":
          description: Logout successful, token invalidated
        "400":
          description: Bad request, invalid token or missing token
        "401":
          description: Unauthorized, no valid token provided
        "500":
          description: Internal server error

  /payments:
    post:
      tags:
        - payment
      summary: Process a payment for an order
      description: Processes a payment for an open order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  description: ID of the order being paid
                payments:
                  type: array
                  description: List of payments (split payments allowed)
                  items:
                    type: object
                    properties:
                      paymentType:
                        type: integer
                        enum: [Cash, Card, GiftCard]
                        description: Payment method
                      paidAt:
                        type: string
                        format: date-time
                        description: Amount paid
              required:
                - orderId
                - payments
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentId:
                    type: string
        "400":
          description: Invalid payment details or order status not open
        "500":
          description: Internal server error

    get:
      tags:
        - payment
      summary: Retrieve a list of payments
      description: Fetches a list of payments. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: paymentType
          in: query
          description: Filter payments based on their type
          required: false
          schema:
            type: integer
        - name: startPaidAt
          in: query
          description: Filter payments made on or after this starting date and time
          required: false
          schema:
            type: string
            format: date
        - name: endPaidAt
          in: query
          description: Filter payments made on or before this ending date and time
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: A list of payments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique ID of the payment
                    paymentTypeEnum:
                      type: integer
                      description: Enum value from PaymentType
                    paidAt:
                      type: string
                      format: date
                      description: Date and time the payment was made on
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /payments/{paymentId}:
    get:
      tags:
        - payment
      summary: Retrieve a single payment by ID
      description: Fetches a payment's details based on the provided payment ID. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path # <--- This was missing
          required: true
          description: Unique identifier of the payment
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique ID of the payment
                  paymentTypeEnum:
                    type: integer
                    description: Enum value from PaymentType
                  paidAt:
                    type: string
                    format: date
                    description: Date and time the payment was made on
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - payment
      summary: Refund a payment
      description: Processes a refund for a specified payment by removing the payment record and puts old data into PaymentAudit table with DB triggers. **Only admin users** are allowed to refund payments.
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path
          required: true
          description: Unique identifier of the payment
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Payment refunded successfully
        "400":
          description: Invalid paymentId
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original payment not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

  /discount:
    post:
      tags:
        - discount
      summary: Create a new discount
      description: Adds a new discount to the system. **Access restricted to admin or manager users only**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                percentage:
                  type: number
                  format: decimal
                  description: Discount percentage (must be between 0 and 100)
                fixed:
                  type: number
                  format: decimal
                  description: Fixed discount amount (must be greater than or equal to 0)
                validFrom:
                  type: string
                  format: date-time
                  description: The date and time when the discount becomes valid
                validTo:
                  type: string
                  format: date-time
                  description: The date and time when the discount expires
                createdBy:
                  type: string
                  format: uuid
                  description: The ID of the person who created the discount
                businessId:
                  type: string
                  format: uuid
                  description: The business' ID
                locationBusinessId:
                  type: string
                  format: uuid
                  description: The business' location ID
      responses:
        "201":
          description: Discount created successfully
        "400":
          description: Invalid request data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin)
        "500":
          description: Internal server error

  /discounts:
    get:
      tags:
        - discount
      summary: Retrieve a list of discounts
      description: Fetches a list of discounts. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: validFrom
          in: query
          description: Filter discounts valid from this date and time
          required: false
          schema:
            type: string
            format: date-time
        - name: validTo
          in: query
          description: Filter discounts valid up to this date and time
          required: false
          schema:
            type: string
            format: date-time
        - name: businessId
          in: query
          description: Filter discounts by business
          required: false
          schema:
            type: string
            format: uuid
        - name: locationBusinessId
          in: query
          description: Filter discounts by business' location
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of discounts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    discountId:
                      type: string
                      description: Unique ID of the discount
                    percentage:
                      type: number
                      format: double
                      description: Discount percentage
                    fixed:
                      type: number
                      format: double
                      description: Fixed discount amount
                    validFrom:
                      type: string
                      format: date-time
                      description: The date and time when the discount becomes valid
                    validTo:
                      type: string
                      format: date-time
                      description: The date and time when the discount expires
                    createdAt:
                      type: string
                      format: date-time
                      description: The date and time when the discount was created
                    modifiedAt:
                      type: string
                      format: date-time
                      description: The date and time when the discount was last modified
                    businessId:
                      type: string
                      format: uuid
                      description: ID of the business that discount belongs to
                    locationBusinessId:
                      type: string
                      format: uuid
                      description: ID of the business' location that discount belongs to
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /discounts/{discountId}:
    get:
      tags:
        - discount
      summary: Retrieve a single discount by ID
      description: Fetches a discount's details based on the provided discount ID. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Discount details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  discountId:
                    type: string
                    description: Unique ID of the discount
                  percentage:
                    type: number
                    format: double
                    description: Discount percentage
                  fixed:
                    type: number
                    format: double
                    description: Fixed discount amount
                  validFrom:
                    type: string
                    format: date-time
                    description: The date and time when the discount becomes valid
                  validTo:
                    type: string
                    format: date-time
                    description: The date and time when the discount expires
                  createdAt:
                    type: string
                    format: date-time
                    description: The date and time when the discount was created
                  modifiedAt:
                    type: string
                    format: date-time
                    description: The date and time when the discount was last modified
                  businessId:
                    type: string
                    format: uuid
                    description: ID of the business that discount belongs to
                  locationBusinessId:
                    type: string
                    format: uuid
                    description: ID of the business' location that discount belongs to
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "404":
          description: Discount not found
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - discount
      summary: Update an existing discount
      description: Updates an existing discount based on the provided discount ID. **Access restricted to admin users only**.
      security:
        - bearerAuth: []
      parameters:
        - name: discountId
          in: path
          required: true
          description: Unique identifier of the discount to be updated
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                percentage:
                  type: number
                  format: double
                  description: Discount percentage (must be between 0 and 100)
                fixed:
                  type: number
                  format: double
                  description: Fixed discount amount (must be greater than or equal to 0)
                validFrom:
                  type: string
                  format: date-time
                  description: The date and time when the discount becomes valid
                validTo:
                  type: string
                  format: date-time
                  description: The date and time when the discount expires
                modifiedBy:
                  type: string
                  description: The user who modified the discount
                businessId:
                  type: string
                  format: uuid
                  description: ID of the business that discount belongs to
                locationBusinessId:
                  type: string
                  format: uuid
                  description: ID of the business' location that discount belongs to
      responses:
        "200":
          description: Discount updated successfully
        "400":
          description: Invalid request data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin)
        "404":
          description: Discount not found
        "500":
          description: Internal server error

    delete:
      tags:
        - discount
      summary: Delete a discount
      description: Deletes a specified discount from the system. **Access restricted to admin users only**.
      security:
        - bearerAuth: []
      parameters:
        - name: discountId
          in: path
          description: Unique identifier of the discount to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Discount deleted successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin)
        "404":
          description: Discount not found
        "500":
          description: Internal server error

  /reservations:
    post:
      tags:
        - reservation
      summary: Create a new reservation
      description: Creates a new reservation. **Access restricted to admin users only**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId:
                  type: string
                  format: uuid
                restaurantId:
                  type: string
                  format: uuid
                name:
                  type: string
                guestNumber:
                  type: integer
                  description: Number of the guests
                  example: 1
                reservationState:
                  type: string
                  enum:
                    - active
                    - cancelled
                    - completed
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                createdBy:
                  type: string
                  format: uuid
      responses:
        "201":
          description: Reservation created successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "500":
          description: Internal server error

    get:
      tags:
        - reservation
      summary: Retrieve a list of reservations
      description: Fetches a list of reservations. **Access restricted to users with appropriate roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: reservationState
          in: query
          description: Filter reservations by their state.
          required: false
          schema:
            type: string
            enum:
              - active
              - cancelled
              - completed
        - name: startDate
          in: query
          description: Filter reservations created on or after this date.
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Filter reservations created on or before this date.
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: A list of reservations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    reservationId:
                      type: string
                      format: uuid
                    restaurantId:
                      type: string
                      format: uuid
                    name:
                      type: string
                    reservationState:
                      type: string
                      enum:
                        - active
                        - cancelled
                        - completed
                      example: "confirmed"
                    startDate:
                      type: string
                      format: date-time
                    endDate:
                      type: string
                      format: date-time
                    createdAt:
                      type: string
                      format: date-time
                    createdBy:
                      type: string
                      format: uuid
                      description: The employee who created the reservation
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "500":
          description: Internal server error

  /reservations/{reservationId}:
    get:
      tags:
        - reservation
      summary: Retrieve a single reservation by ID
      description: Fetches a reservation’s details based on the provided reservation ID. **Access restricted to users with appropriate roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: reservationId
          in: path
          description: Unique identifier of the reservation
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Reservation details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationId:
                    type: string
                    format: uuid
                  restaurantId:
                    type: string
                    format: uuid
                  guestNumber:
                    type: integer
                    description: Number of the guests
                  name:
                    type: string
                  reservationState:
                    type: string
                    enum:
                      - active
                      - cancelled
                      - completed
                    example: "confirmed"
                  startDate:
                    type: string
                    format: date-time
                  endDate:
                    type: string
                    format: date-time
                  createdAt:
                    type: string
                    format: date-time
                  createdBy:
                    type: string
                    format: uuid
                    description: The employee who created the reservation
                  modifiedAt:
                    type: string
                    format: date-time
                  modifiedBy:
                    type: string
                    format: uuid
                    description: The employee who modified the reservation
        "400":
          description: Invalid reservation ID
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Reservation not found
        "500":
          description: Internal server error

    put:
      tags:
        - reservation
      summary: Update a reservation
      description: Updates a reservation's details. **Access restricted to admin users only**.
      security:
        - bearerAuth: []
      parameters:
        - name: reservationId
          in: path
          description: Unique identifier of the reservation
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId:
                  type: string
                restaurantId:
                  type: string
                  format: uuid
                name:
                  type: string
                reservationState:
                  type: string
                  enum:
                    - active
                    - cancelled
                    - completed
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                guestCount:
                  type: integer
                  description: Number of the guests
                modifiedAt:
                  type: string
                  format: date-time
                modifiedBy:
                  type: string
                  format: uuid
                  description: The employee who modified the reservation
      responses:
        "200":
          description: Reservation updated successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Reservation not found
        "500":
          description: Internal server error

    delete:
      tags:
        - reservation
      summary: Delete a reservation
      description: Deletes a reservation based on the provided reservation ID. **Only admin users can delete reservations**.
      security:
        - bearerAuth: []
      parameters:
        - name: reservationId
          in: path
          description: Unique identifier of the reservation
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Reservation deleted successfully
        "400":
          description: Invalid reservation ID
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Reservation not found
        "500":
          description: Internal server error

  /reservations/cancel/{reservationId}:
    post:
      tags:
        - reservation
      summary: Cancels a reservation
      description: Cancels a reservation based on the provided reservation ID.
      parameters:
        - name: reservationId
          in: path
          description: Unique identifier of the reservation
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Reservation cancelled successfully
        "400":
          description: Invalid reservation ID
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Reservation not found
        "500":
          description: Internal server error

  /employees:
    post:
      tags:
        - employee
      summary: Create a new employee
      description: Creates a new employee and puts data into EmployeeAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: First name of the employee
                surname:
                  type: string
                  description: Last name of the employee
                userTypeEnum:
                  type: integer
                  description: User type enum from UserTypeEnum
                location_business_id:
                  type: string
                  format: uuid
                  description: ID of the business' location
              required:
                - name
                - surname
                - userTypeEnum
                - location_business_id
      responses:
        "201":
          description: Employee created successfully
        "400":
          description: Invalid employee data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - employee
      summary: Retrieve a list of employees that currently working
      description: Fetches a list of employees. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter employees by their first name
          required: false
          schema:
            type: string
        - name: surname
          in: query
          description: Filter employees by their last name
          required: false
          schema:
            type: string
        - name: userTypeEnum
          in: query
          description: Filter employees by their user type enum
          required: false
          schema:
            type: integer
        - name: businessId
          in: query
          description: Filter employees by business ID
          required: false
          schema:
            type: string
            format: uuid
        - name: locationBusinessId
          in: query
          description: Filter employees by business' location ID
          schema:
            type: string
            format: uuid
        - name: userType
          in: query
          description: User type enum value
          required: false
          schema:
            type: integer
        - name: workingFromFrom
          in: query
          description: Filter out by date (working from (from date))
          required: false
          schema:
            type: string
            format: date
        - name: workingFromTo
          in: query
          description: Filter out by date (working from (to date))
          required: false
          schema:
            type: string
            format: date
        - name: email
          in: query
          description: Filter out by email
          required: false
          schema:
            type: string
            format: email
      responses:
        "200":
          description: A list of employees retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique ID of the employee
                    name:
                      type: string
                      description: First name of the employee
                    surname:
                      type: string
                      description: Last name of the employee
                    userTypeEnum:
                      type: integer
                      description: User type enum from UserTypeEnum
                    business_id:
                      type: string
                      format: uuid
                      description: ID of the business the employee belongs to
                    location_business_id:
                      type: string
                      format: uuid
                      description: ID of the business' location
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /employees/{employeeId}:
    get:
      tags:
        - employee
      summary: Retrieve a single employee by ID
      description: Fetches an employee's details based on the provided employee ID. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          description: Unique identifier of the employee
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Employee details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique ID of the employee
                  name:
                    type: string
                    description: First name of the employee
                  surname:
                    type: string
                    description: Last name of the employee
                  userTypeEnum:
                    type: integer
                    description: User type enum from UserTypeEnum
                  createdAt:
                    type: string
                    format: date-time
                    description: Created at date and time
                  userName:
                    type: string
                    description: Employee's user name
                  userId:
                    type: string
                    format: uuid
                    description: Employee's user Id for navigation
                  business_id:
                    type: string
                    format: uuid
                    description: ID of the business the employee belongs to
                  location_business_id:
                    type: string
                    format: uuid
                    description: ID of the business' location
        "400":
          description: Invalid request
        "404":
          description: Employee not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - employee
      summary: Update existing employee
      description: Updates existing employee and puts old data into EmployeeAudit table with DB triggers. **Access restricted to users with admin or manager roles**. **Only admin users** can add the `business_id`, **Only admin or manager users** can add the `location_business_id`.
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          description: Unique identifier of the employee
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: First name of the employee
                surname:
                  type: string
                  description: Last name of the employee
                userTypeEnum:
                  type: integer
                  description: User type enum from UserTypeEnum
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the employee belongs to
                location_business_id:
                  type: string
                  format: uuid
                  description: ID of the business' location
              anyOf: # At least one field from the list must be present
                - required:
                    - name
                - required:
                    - surname
                - required:
                    - userTypeEnum
                - required:
                    - business_id
                - required:
                    - location_business_id
      responses:
        "200":
          description: Employee edited successfully
        "400":
          description: Invalid employee data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "404":
          description: Original employee not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - employee
      summary: Delete employee from working DB table
      description: Deletes employee data from working table and puts old data into EmployeeAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: employeeId
          in: path
          required: true
          description: Unique identifier of the employee
          schema:
            type: string
      responses:
        "204":
          description: Employee removed successfully
        "400":
          description: Invalid request
        "404":
          description: Employee not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /giftCard:
    post:
      tags:
        - giftCard
      summary: Create a new gift card
      description: Creates a new gift card and puts data into GiftCardAudit table with DB triggers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  format: double
                  description: Price of the gift card
                validTo:
                  type: string
                  format: date
                  description: Gift card valid to date
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the employee belongs to
              required:
                - number
                - business_id
      responses:
        "201":
          description: Gift card created successfully
        "400":
          description: Invalid gift card data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - giftCard
      summary: Retrieve a list of gift cards
      description: Fetches a list of gift cards.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter gift cards by their price
          required: false
          schema:
            type: number
            format: double
        - name: code
          in: query
          description: Filter gift cards by their code
          required: false
          schema:
            type: string
        - name: validTo
          in: query
          description: Filter gift cards by their valid to date
          required: false
          schema:
            type: string
            format: date
        - name: businessId
          in: query
          description: Filter gift cards by business ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of gift cards retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the gift card
                    price:
                      type: number
                      format: double
                      description: Price of the gift card
                    code:
                      type: string
                      description: Code of the gift card
                    validTo:
                      type: string
                      format: date
                      description: Valid to date
                    business_id:
                      type: string
                      format: uuid
                      description: ID of the business the gift card belongs to
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /giftCard/{giftCardId}:
    get:
      tags:
        - giftCard
      summary: Retrieve a single giftCard by ID
      description: Fetches an gift card's details based on the provided gift card ID.
      parameters:
        - name: giftCardId
          in: path
          required: true
          description: Unique identifier of the gift card
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Gift card details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique ID of the gift card
                  price:
                    type: number
                    format: double
                    description: Price of the gift card
                  code:
                    type: string
                    description: Code of the gift card
                  validTo:
                    type: string
                    format: date
                    description: Valid to date
                  createdAt:
                    type: string
                    format: date-time
                    description: Created at date and time
                  createdByName:
                    type: string
                    description: Employee's name who created gift card
                  createdById:
                    type: string
                    format: uuid
                    description: Employee's id who created gift card
                  business_id:
                    type: string
                    format: uuid
                    description: ID of the business the gift card belongs to
        "400":
          description: Invalid request
        "404":
          description: Gift card not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - giftCard
      summary: Update existing gift card
      description: Updates existing gift card and puts old data into GiftCardAudit table with DB triggers. **Only admin users** can add the `business_id`.
      parameters:
        - name: giftCardId
          in: path
          required: true
          description: Unique identifier of the gift card
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  format: double
                  description: Price of the gift card
                code:
                  type: string
                  description: Code of the gift card
                validTo:
                  type: string
                  format: date
                  description: Valid to date
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the gift card belongs to
              anyOf: # Requires at least one field from the following
                - required:
                    - price
                - required:
                    - code
                - required:
                    - validTo
                - required:
                    - business_id
      responses:
        "200":
          description: Gift card edited successfully
        "400":
          description: Invalid gift card data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original gift card not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - giftCard
      summary: Delete gift card from working DB table
      description: Deletes gift card data from working table and puts old data into GiftCardAudit table with DB triggers. **Access restricted to users with Manager or Admin role**.
      security:
        - bearerAuth: []
      parameters:
        - name: giftCardId
          in: path
          required: true
          description: Unique identifier of the gift card
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Gift card removed successfully
        "400":
          description: Invalid request
        "404":
          description: Gift card not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin and Manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /restaurant:
    post:
      tags:
        - restaurant
      summary: Create new restaurant
      description: Creates a new restaurant entity and puts data into RestaurantAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Restaurant name
                country:
                  type: string
                  description: Country name
                city:
                  type: string
                  description: City name
                street:
                  type: string
                  description: Street name
                number:
                  type: string
                  description: House number
                postCode:
                  type: string
                  description: Post code
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the employee belongs to
              required:
                - name
                - country
                - city
                - street
                - number
                - postCode
                - business_id
      responses:
        "201":
          description: Restaurant card created successfully
        "400":
          description: Invalid restaurant data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin or manager)
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - restaurant
      summary: Retrieve a list of business's restaurants
      description: Fetches a list of restaurants. **Only admin users** can add the `business_id`.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter restaurant by their name
          required: false
          schema:
            type: string
        - name: code
          in: query
          description: Filter restaurants by their code
          required: false
          schema:
            type: integer
        - name: country
          in: query
          description: Filter restaurants by their country
          required: false
          schema:
            type: string
        - name: city
          in: query
          description: Filter restaurants by city
          required: false
          schema:
            type: string
        - name: street
          in: query
          description: Filter restaurants by street
          required: false
          schema:
            type: string
        - name: number
          in: query
          description: Filter restaurants by number
          required: false
          schema:
            type: string
        - name: postCode
          in: query
          description: Filter restaurants by postCode
          required: false
          schema:
            type: string
        - name: businessId
          in: query
          description: Filter restaurants by business **(only admin)**
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of restaurants retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the restaurant
                    name:
                      type: string
                      description: Name of the restaurant
                    code:
                      type: string
                      description: Code of the restaurant
                    fullAddress:
                      type: string
                      description: Full address of the restaurant
                    business_id:
                      type: string
                      format: uuid
                      description: ID of the business the restaurant belongs to
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /restaurant/{restaurantId}:
    get:
      tags:
        - restaurant
      summary: Retrieve a single restaurant by ID
      description: Fetches an restaurant's details based on the provided restaurant ID.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Unique identifier of the restaurant
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Restaurant details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique ID of the restaurant
                  code:
                    type: string
                    description: Code of the restaurant
                  name:
                    type: string
                    description: Name of the restaurant
                  country:
                    type: string
                    description: Country of the restaurant
                  city:
                    type: string
                    description: City of the restaurant
                  street:
                    type: string
                    description: Street of the restaurant
                  number:
                    type: string
                    description: Number of the restaurant
                  postCode:
                    type: string
                    description: Post code of the restaurant
                  addressId:
                    type: string
                    format: uuid
                    description: Address table's id
                  createdAt:
                    type: string
                    format: date-time
                    description: Created at date and time
                  createdByName:
                    type: string
                    description: Employee's name who created restaurant
                  createdById:
                    type: string
                    format: uuid
                    description: Employee's id who created restaurant
                  business_id:
                    type: string
                    format: uuid
                    description: ID of the business the restaurant belongs to
        "400":
          description: Invalid request
        "404":
          description: Restaurant not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - restaurant
      summary: Update existing restaurant
      description: Updates existing restaurant and puts old data into RestaurantAudit table with DB triggers. **Only admin users** can add the `business_id`.
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Unique identifier of the restaurant
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the restaurant
                country:
                  type: string
                  description: Country of the restaurant
                city:
                  type: string
                  description: City of the restaurant
                street:
                  type: string
                  description: Street of the restaurant
                number:
                  type: string
                  description: Number of the restaurant
                postCode:
                  type: string
                  description: Post code of the restaurant
                addressId:
                  type: string
                  format: uuid
                  description: ID of the address' table
                business_id:
                  type: string
                  format: uuid
                  description: ID of the business the restaurant belongs to
              anyOf: # Requires at least one field from the following
                - required:
                    - name
                - required:
                    - country
                - required:
                    - city
                - required:
                    - street
                - required:
                    - number
                - required:
                    - postCode
                - required:
                    - business_id
      responses:
        "200":
          description: Restaurant edited successfully
        "400":
          description: Invalid restaurant data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original restaurant not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - restaurant
      summary: Delete restaurant from working DB table
      description: Deletes gift card data from working table and puts old data into RestaurantAudit table with DB triggers. **Access restricted to users with Admin role**.
      security:
        - bearerAuth: []
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Unique identifier of the restaurant
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Restaurant removed successfully
        "400":
          description: Invalid request
        "404":
          description: Restaurant not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  /product:
    post:
      tags:
        - product
      summary: Create new product
      description: Creates a new product entity and puts data into ProductAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      responses:
        "201":
          description: Product created successfully
        "400":
          description: Invalid product data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin or manager)
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    get:
      tags:
        - product
      summary: Retrieve a list of products
      description: Fetches a list of products.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter products by their name
          required: false
          schema:
            type: string
        - name: tax
          in: query
          description: Filter products by their tax
          required: false
          schema:
            type: string
            format: uuid
        - name: price
          in: query
          description: Filter products by their price
          required: false
          schema:
            type: number
            format: double
        - name: createdAt
          in: query
          description: Filter products by date they were created
          required: false
          schema:
            type: string
            format: date-time
        - name: modifiedAt
          in: query
          description: Filter products by date they were modified
          required: false
          schema:
            type: string
            format: date-time
        - name: modifiedBy
          in: query
          description: Filter products by user who last modified them
          required: false
          schema:
            type: string
            format: uuid
        - name: createdBy
          in: query
          description: Filter products by user who created them
          required: false
          schema:
            type: string
            format: uuid
        - name: businessId
          in: query
          description: Filter products by business
          required: false
          schema:
            type: string
            format: uuid
        - name: locationBusinessId
          in: query
          description: Filter products by business' location
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/product"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when product was first created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when product was last modified
                        modifiedBy:
                          type: string
                          format: uuid
                          description: ID of the employee who last modified the product
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /product/{productId}:
    get:
      tags:
        - product
      summary: Retrieve a single product by ID
      description: Fetches a product's details based on the provided product ID.
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique identifier of the product
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/product"
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Date when product was first created
                      modifiedAt:
                        type: string
                        format: date-time
                        description: Date when product was last modified
                      modifiedBy:
                        type: string
                        format: uuid
                        description: ID of the employee who last modified the product
        "400":
          description: Invalid request
        "404":
          description: Product not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
    put:
      tags:
        - product
      summary: Update existing product
      description: Updates existing product and puts old data into ProductAudit table with DB triggers. **Only admin users** can add the `business_id`.
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique identifier of the product
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                taxId:
                  type: string
                  format: uuid
                  description: Id of the tax that is applied to product
                price:
                  type: number
                  format: double
                  description: Product price without tax
                businessId:
                  type: string
                  format: uuid
                  description: ID of the business to which the product belongs
                locationBusinessId:
                  type: string
                  format: uuid
                  description: ID of the business' location to which the product belongs
              anyOf:
                - required:
                    - name
                - required:
                    - tax
                - required:
                    - price
                - required:
                    - businessId
                - required:
                    - locationBusinessId
      responses:
        "200":
          description: Product edited successfully
        "400":
          description: Invalid product data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original product not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    delete:
      tags:
        - product
      summary: Delete product from working DB table
      description: Deletes product data from working table and puts old data into ProductAudit table with DB triggers. **Access restricted to users with Admin role**.
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique identifier of the product
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Product removed successfully
        "400":
          description: Invalid request
        "404":
          description: Product not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /product/{productId}/count:
    put:
      tags:
        - product
      summary: Update product count
      description: Updates the stock count for an existing product based on the provided product ID. **Only authorized users** can update the count.
      parameters:
        - name: productId
          in: path
          required: true
          description: Unique identifier of the product
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  type: integer
                  description: The new count to be set for the product
      responses:
        "200":
          description: Product count updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: string
                    format: uuid
                    description: The product ID
                  count:
                    type: integer
                    description: The updated product count
        "400":
          description: Invalid request (e.g., invalid count or product ID)
        "404":
          description: Product not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "500":
          description: Internal server error

  /user:
    post:
      tags:
        - user
      summary: Create new user
      description: Creates a new user entity and puts data into UserAudit table with DB triggers. **Access restricted to users with Admin role**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid user data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only admin or manager)
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    get:
      tags:
        - user
      summary: Retrieve a list of users
      description: Fetches a list of users. **Access restricted to users with Admin role**.
      security:
        - bearerAuth: []
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: username
          in: query
          description: Filter users by username
          required: false
          schema:
            type: string
        - name: passwordHash
          in: query
          description: Filter users by password hash
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Filter users by their email
          required: false
          schema:
            type: string
        - name: createdAt
          in: query
          description: Filter users by date they were created
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: A list of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/user"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when user was created
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /user/{userId}:
    get:
      tags:
        - user
      summary: Retrieve a single user by ID
      description: Fetches a user's details based on the provided user ID.  **Access restricted to users with Admin role**.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                  allOf:
                    - $ref: "#/components/schemas/user"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when user was created
        "400":
          description: Invalid request
        "404":
          description: User not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
    put:
      tags:
        - user
      summary: Update existing user
      description: Updates existing user and puts old data into UserAudit table with DB triggers.
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username
                passwordHash:
                  type: string
                  description: Hashed user password
                email:
                  type: string
                  description: User email address
              anyOf:
                - required:
                    - username
                - required:
                    - passwordHash
                - required:
                    - email
      responses:
        "200":
          description: User edited successfully
        "400":
          description: Invalid user data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original user not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    delete:
      tags:
        - user
      summary: Delete user from working DB table
      description: Deletes user data from working table and puts old data into UserAudit table with DB triggers. **Access restricted to users with Admin role**.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User removed successfully
        "400":
          description: Invalid request
        "404":
          description: User not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /orders:
    post:
      tags:
        - order
      summary: Create a new order
      description: Creates a new order.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderItems:
                  type: array
                  description: List of items in the order
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        description: ID of the product
                      quantity:
                        type: integer
                        description: Quantity of the product
                discountId:
                  type: string
                  description: Optional discount applied to the order
                tip:
                  type: number
                  format: decimal
                  description: Optional tip added by the customer
                businessId:
                  type: string
                  format: uuid
                  description: ID of the bussines
                locationBusinessId:
                  type: string
                  format: uuid
                  description: ID of the business' location
              required:
                - orderItems
      responses:
        "201":
          description: Order created successfully
        "400":
          description: Invalid input data
        "500":
          description: Internal server error
    get:
      tags:
        - order
      summary: Retrieve a list of orders
      description: Fetches a list of orders.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: price
          in: query
          description: Filter orders by their price
          required: false
          schema:
            type: number
            format: double
        - name: createdAt
          in: query
          description: Filter orders by their creation date
          required: false
          schema:
            type: string
            format: date
        - name: modifiedAt
          in: query
          description: Filter orders by their modification date
          required: false
          schema:
            type: string
            format: date
        - name: modifiedBy
          in: query
          description: Filter orders by the ID of the employee who modified the orders
          required: false
          schema:
            type: string
            format: uuid
        - name: createdBy
          in: query
          description: Filter orders by the ID of the order creator
          required: false
          schema:
            type: string
            format: uuid
        - name: businessId
          in: query
          description: Filter orders by business ID
          required: false
          schema:
            type: string
            format: uuid
        - name: locationBusinessId
          in: query
          description: Filter orders by business' location ID
          required: false
          schema:
            type: string
            format: uuid
        - name: orderStatus
          in: query
          description: Filter orders by their order status enum value
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: A list of orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the order
                    price:
                      type: number
                      format: double
                      description: Price of the order
                    OrderStatusEnum:
                      type: integer
                      enum: [Open, Closed, Cancelled, Refunded]
                      description: Order type enum from OrderStatusEnum
                    createdAt:
                      type: string
                      format: date
                      description: Order creation date
                    modifiedAt:
                      type: string
                      format: date
                      description: Order modification date
                    modifiedBy:
                      type: string
                      format: uuid
                      description: ID of the employee who modified the order
                    createdBy:
                      type: string
                      format: uuid
                      description: ID of the employee who created the order
                    businessId:
                      type: string
                      format: uuid
                    locationBusinessId:
                      type: string
                      format: uuid
                    orderItems:
                      type: array
                      description: List of items in the order
                      items:
                        type: object
                        properties:
                          productId:
                            type: string
                            description: Product ID
                          quantity:
                            type: integer
                            description: Quantity of the product
                    discountId:
                      type: string
                      format: uuid
                      description: Optional discount applied to the order
                    tip:
                      type: number
                      format: double
                      description: Optional tip added by the customer
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "500":
          description: Internal server error

  /orders/{orderId}:
    get:
      tags:
        - order
      summary: Retrieve a single order
      description: Fetches an order based on the provided order ID.
      parameters:
        - name: orderId
          in: path
          required: true
          description: Unique identifier of the order
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique ID of the order
                  price:
                    type: number
                    format: double
                    description: Price of the order
                  createdAt:
                    type: string
                    format: date
                    description: Order creation date
                  modifiedAt:
                    type: string
                    format: date
                    description: Order modification date
                  modifiedBy:
                    type: string
                    format: uuid
                    description: ID of the employee who modified the order
                  createdBy:
                    type: string
                    format: uuid
                    description: ID of the employee who created the order
                  businessId:
                    type: string
                    format: uuid
                  locationBusinessId:
                    type: string
                    format: uuid
                  OrderStatusEnum:
                    type: integer
                    enum: [Open, Closed, Cancelled, Refunded]
                    description: Order type enum from OrderStatusEnum
                  orderItems:
                    type: array
                    description: List of items in the order
                    items:
                      type: object
                      properties:
                        productId:
                          type: string
                          format: uuid
                          description: Product ID
                        quantity:
                          type: integer
                          description: Quantity of the product
        "400":
          description: Invalid request
        "404":
          description: Order not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - order
      summary: Modify an open order
      description: Modifies the details of an open order.
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: ID of the order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderItems:
                  type: array
                  description: List of items in the order
                  items:
                    type: object
                    properties:
                      ProductId:
                        type: string
                        description: ID of the product
                      quantity:
                        type: integer
                        description: Quantity of the product
                discountId:
                  type: string
                  format: uuid
                  description: Optional discount applied to the order
                tip:
                  type: number
                  format: double
                  description: Optional tip added by the customer
                businessId:
                  type: string
                  format: uuid
                locationBusinessId:
                  type: string
                  format: uuid
              anyOf:
                - required:
                    - orderItems
                - required:
                    - discountId
                - required:
                    - tip
                - required:
                    - businessId
                - required:
                    - locationBusinessId
      responses:
        "200":
          description: Order updated successfully
        "400":
          description: Invalid input or order status not open
        "404":
          description: Order not found
        "500":
          description: Internal server error

    delete:
      tags:
        - order
      summary: Delete an order
      description: Deletes order with the specified ID. Open orders cannot be deleted. **This action is restricted to admin users**.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            description: The ID of the order
      responses:
        "200":
          description: Order deleted successfully
        "400":
          description: Order is status is open
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/close/{orderId}:
    put:
      tags:
        - order
      summary: Close an order
      description: Closes an order based on the order ID and and puts data into OrderAudit table with DB triggers. Closed orders cannot be modified, but refunds can be processed.
      parameters:
        - name: orderId
          in: path
          required: true
          description: Unique identifier of the order
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Order closed successfully
        "400":
          description: Invalid orderId
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Order not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

  /orders/cancel/{orderId}:
    put:
      tags:
        - order
      summary: Cancel an order
      description: Cancels an open order based on the provided order ID.
      parameters:
        - name: orderId
          in: path
          required: true
          description: Unique identifier of the order
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Order cancelled successfully
        "400":
          description: Invalid orderId
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Order not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

  /orders/refund/{orderId}:
    put:
      tags:
        - order
      summary: Refund an order
      description: Refunds the specified order and puts order data into OrderAudit table with DB triggers. Only closed orders can be refunded. **Action is restricted to admin users**
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: Unique identifier of the order
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Order refunded successfully
        "400":
          description: Invalid orderId
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Order not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

  /productVariation:
    post:
      tags:
        - productVariation
      summary: Create a new product variation
      description: Creates a new product variation and puts data into productVariationAudit table with DB triggers. **Access restricted to users with admin or manager roles.**
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  format: uuid
                name:
                  type: string
                additionalPrice:
                  type: number
                  format: double
                  description: Price of the product variation
              required:
                - productId
                - name
                - additionalPrice
      responses:
        "201":
          description: Product variation created successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (only admin or manager)
        "500":
          description: Internal server error

    get:
      tags:
        - productVariation
      summary: Retrieve a list of product variations
      description: Fetches a list of product variations.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: additionalPrice
          in: query
          description: Filter product variations by their price
          required: false
          schema:
            type: number
            format: double
        - name: createdAt
          in: query
          description: Filter product variations by their creation date
          required: false
          schema:
            type: string
            format: date
        - name: modifiedAt
          in: query
          description: Filter product variations by their modification date
          required: false
          schema:
            type: string
            format: date
        - name: modifiedBy
          in: query
          description: Filter product variations by the ID of the product variation
          required: false
          schema:
            type: string
            format: uuid
        - name: createdBy
          in: query
          description: Filter product variations by the ID of the product variation creator
          required: false
          schema:
            type: string
            format: uuid
        - name: productId
          in: query
          description: Filter product variations by product ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of order variations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the product variation
                    name:
                      type: string
                      description: Name of the product variation
                    additionalPrice:
                      type: number
                      format: double
                      description: Price of the product variation
                    createdAt:
                      type: string
                      format: date
                      description: Product variation creation date
                    modifiedAt:
                      type: string
                      format: date
                      description: product variation modification date
                    modifiedBy:
                      type: string
                      format: uuid
                      description: ID of the employee who modified the product variation
                    createdBy:
                      type: string
                      format: uuid
                      description: ID of the employee who created the product variation
                    productId:
                      type: string
                      format: uuid
                      description: Unique ID of the product variation
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "500":
          description: Internal server error

  /productVariation/{productVariationId}:
    get:
      tags:
        - productVariation
      summary: Retrieve a single product variation
      description: Fetches product variation on the provided product variation ID.
      parameters:
        - name: productVariationId
          in: path
          required: true
          description: ID of the product variation
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product variation retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: ID of the product variation
                  name:
                    type: string
                    description: Name of the product variation
                  additionalPrice:
                    type: number
                    format: double
                    description: Price of the product variation
                  createdAt:
                    type: string
                    format: date
                    description: Product variation creation date
                  modifiedAt:
                    type: string
                    format: date
                    description: Product variation modification date
                  modifiedBy:
                    type: string
                    format: uuid
                    description: ID of the employee who modified the product variation
                  createdBy:
                    type: string
                    format: uuid
                    description: ID of the employee who created the product variation
                  productId:
                    type: string
                    format: uuid
                    description: ID of the product variation
        "400":
          description: Invalid request
        "404":
          description: Product variation not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - productVariation
      summary: Modify product variation
      description: Updates existing product variation and puts old data into ProductVariationAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: productVariationId
          in: path
          required: true
          description: ID of the product variation
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the product variation
                additionalPrice:
                  type: number
                  format: double
                  description: Price of the product variation
              anyOf:
                - required:
                    - name
                - required:
                    - additionalPrice
      responses:
        "200":
          description: Product variation modified successfully
        "400":
          description: Invalid product variation data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (only admin or manager)
        "404":
          description: Product variation not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - productVariation
      summary: Delete product variation.
      description: Deletes product variation data from working table and puts old data into ProductVariationAudit table with DB triggers. **Access restricted to users with admin or manager roles**.
      security:
        - bearerAuth: []
      parameters:
        - name: productVariationId
          in: path
          required: true
          description: ID of the product variation
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Product variation removed successfully
        "400":
          description: Invalid request
        "404":
          description: Product variation not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (only admin or manager)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /business:
    post:
      tags:
        - business
      summary: Create a new business
      description: Creates a new business.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessCode:
                  type: string
                  description: Business code
                name:
                  type: string
                  description: Business name
                phone:
                  type: string
                  description: Business phone number
                email:
                  type: string
                  format: email
                  description: Business email
              required:
                - businessCode
                - name
                - phone
                - email
      responses:
        "201":
          description: Business created successfully
        "400":
          description: Invalid business data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    get:
      tags:
        - business
      summary: Retrieve a list of businesses
      description: Fetches a list of businesses.
      parameters:
        - name: resultCount
          in: query
          description: Maximum length of returned list
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Ordering column name
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: businessCode
          in: query
          description: Filter businesses by their business code
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter businesses by their name
          required: false
          schema:
            type: string
        - name: phone
          in: query
          description: Filter businesses by their phone number
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Filter businesses by their email
          required: false
          schema:
            type: string
            format: email
        - name: createdAt
          in: query
          description: Filter businesses by date they were created
          required: false
          schema:
            type: string
            format: date-time
        - name: createdBy
          in: query
          description: Filter businesses by user who created them
          required: false
          schema:
            type: string
            format: uuid
        - name: modifiedAt
          in: query
          description: Filter businesses by when they were modified
          required: false
          schema:
            type: string
            format: date-time
        - name: modifiedBy
          in: query
          description: Filter businesses by user who last modified them
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of businesses retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    businessCode:
                      type: string
                      description: Business Code
                    name:
                      type: string
                      description: Name of the business
                    phone:
                      type: string
                      description: Phone number of the business
                    email:
                      type: string
                      format: email
                      description: Email of the business
                    createdAt:
                      type: string
                      format: date-time
                      description: Date when business was first created
                    createdBy:
                      type: string
                      format: uuid
                      description: ID of the employee who created the business
                    modifiedAt:
                      type: string
                      format: date-time
                      description: Date when business was last modified
                    modifiedBy:
                      type: string
                      format: uuid
                      description: ID of the employee who last modified the business
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /business/{businessId}:
    get:
      tags:
        - business
      summary: Retrieve a single business by ID
      description: Fetches details of a business based on the provided business ID.
      parameters:
        - name: businessId
          in: path
          required: true
          description: Unique identifier of the business
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Business details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  businessCode:
                    type: string
                    description: Business Code
                  name:
                    type: string
                    description: Name of the business
                  phone:
                    type: string
                    description: Phone number of the business
                  email:
                    type: string
                    format: email
                    description: Email of the business
                  createdAt:
                    type: string
                    format: date-time
                    description: Date when business was first created
                  createdBy:
                    type: string
                    format: uuid
                    description: ID of the employee who created the business
                  modifiedAt:
                    type: string
                    format: date-time
                    description: Date when business was last modified
                  modifiedBy:
                    type: string
                    format: uuid
                    description: ID of the employee who last modified the business
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
    put:
      tags:
        - business
      summary: Update existing business
      description: Updates existing business.
      parameters:
        - name: businessId
          in: path
          required: true
          description: Unique identifier of the business
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessCode:
                  type: string
                  description: Business code
                name:
                  type: string
                  description: Business name
                phone:
                  type: string
                  description: Business phone
                email:
                  type: string
                  format: email
                  description: Business email
              anyOf:
                - required:
                    - businessCode
                - required:
                    - name
                - required:
                    - phone
                - required:
                    - email
      responses:
        "200":
          description: Business edited successfully
        "400":
          description: Invalid business data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Original business not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    delete:
      tags:
        - business
      summary: Delete business from working DB table
      description: Deletes business data from working table.
      parameters:
        - name: businessId
          in: path
          required: true
          description: Unique identifier of the business
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Business removed successfully
        "400":
          description: Invalid request
        "404":
          description: Business not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /inventory:
    post:
      tags:
        - inventory
      summary: Create a new inventory item
      description: Creates a new inventory record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProductId:
                  type: string
                  format: uuid
                  description: Unique identifier of the product
                ProductVariationId:
                  type: string
                  format: uuid
                  description: Unique identifier of the product variation
                Count:
                  type: integer
                  description: Number of items in stock
              required:
                - ProductId
                - ProductVariationId
                - Count
      responses:
        "201":
          description: Inventory item created successfully
        "400":
          description: Invalid inventory data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - inventory
      summary: Retrieve a list of inventory items
      description: Fetches a list of inventory items.
      parameters:
        - name: resultCount
          in: query
          description: Maximum number of items to return
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Column to order results by
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: ProductId
          in: query
          description: Filter inventory by product ID
          required: false
          schema:
            type: string
            format: uuid
        - name: ProductVariationId
          in: query
          description: Filter inventory by product variation ID
          required: false
          schema:
            type: string
            format: uuid
        - name: Count
          in: query
          description: Filter inventory by count
          required: false
          schema:
            type: integer
        - name: createdAt
          in: query
          description: Filter inventory by creation date
          required: false
          schema:
            type: string
            format: date-time
        - name: modifiedAt
          in: query
          description: Filter inventory by modification date
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: A list of inventory items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    InventoryId:
                      type: string
                      format: uuid
                      description: Unique identifier of the inventory item
                    ProductId:
                      type: string
                      format: uuid
                      description: Unique identifier of the product
                    ProductVariationId:
                      type: string
                      format: uuid
                      description: Unique identifier of the product variation
                    Count:
                      type: integer
                      description: Number of items in stock
                    createdAt:
                      type: string
                      format: date-time
                      description: Date when the inventory item was created
                    modifiedAt:
                      type: string
                      format: date-time
                      description: Date when the inventory item was last modified
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /inventory/{inventoryId}:
    get:
      tags:
        - inventory
      summary: Retrieve a specific inventory item by ID
      description: Fetches details of an inventory item based on the provided inventory ID.
      parameters:
        - name: inventoryId
          in: path
          required: true
          description: Unique identifier of the inventory item
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Inventory item details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  InventoryId:
                    type: string
                    format: uuid
                    description: Unique identifier of the inventory item
                  ProductId:
                    type: string
                    format: uuid
                    description: Unique identifier of the product
                  ProductVariationId:
                    type: string
                    format: uuid
                    description: Unique identifier of the product variation
                  Count:
                    type: integer
                    description: Number of items in stock
                  createdAt:
                    type: string
                    format: date-time
                    description: Date when the inventory item was created
                  modifiedAt:
                    type: string
                    format: date-time
                    description: Date when the inventory item was last modified
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - inventory
      summary: Update existing inventory item
      description: Updates an existing inventory item.
      parameters:
        - name: inventoryId
          in: path
          required: true
          description: Unique identifier of the inventory item
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProductId:
                  type: string
                  format: uuid
                  description: Unique identifier of the product
                ProductVariationId:
                  type: string
                  format: uuid
                  description: Unique identifier of the product variation
                Count:
                  type: integer
                  description: Number of items in stock
              required:
                - ProductId
                - ProductVariationId
                - Count
      responses:
        "200":
          description: Inventory item updated successfully
        "400":
          description: Invalid inventory data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Inventory item not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - inventory
      summary: Delete inventory item
      description: Deletes an inventory item from the system.
      parameters:
        - name: inventoryId
          in: path
          required: true
          description: Unique identifier of the inventory item
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Inventory item removed successfully
        "400":
          description: Invalid request
        "404":
          description: Inventory item not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /sysparams:
    get:
      tags:
        - sysparams
      summary: Retrieve a list of system parameters items
      description: Fetches a list of system parameters items.
      parameters:
        - name: resultCount
          in: query
          description: Maximum number of items to return
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Column to order results by
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: ProductId
          in: query
          description: Filter system parameters by ID
          required: false
          schema:
            type: integer
        - name: friendlyName
          in: query
          description: Filter system parameters by friendly name
          required: false
          schema:
            type: string
        - name: Description
          in: query
          description: Filter system parameters by description
          required: false
          schema:
            type: string
        - name: createdAt
          in: query
          description: Filter system parameters by creation date
          required: false
          schema:
            type: string
            format: date-time
        - name: modifiedAt
          in: query
          description: Filter system parameters by modification date
          required: false
          schema:
            type: string
            format: date-time
        - name: value
          in: query
          description: Filter system parameters by value
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of inventory items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    SysParamId:
                      type: integer
                      description: Unique identifier of the system parameter item
                    Name:
                      type: string
                      description: Unique name of the system parameter
                    FriendlyName:
                      type: string
                      description: Friendly name of the system parameter
                    Value:
                      type: string
                      description: Value of system parameter
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /sysparams/{sysparamId}:
    get:
      tags:
        - sysparams
      summary: Retrieve a specific system parameter item by ID
      description: Fetches details of an system parameter item based on the provided ID.
      parameters:
        - name: sysparamId
          in: path
          required: true
          description: Unique identifier of the system parameter item
          schema:
            type: integer
      responses:
        "200":
          description: System parameter item details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  SysParamId:
                    type: integer
                    description: Unique identifier of the system parameter item
                  Name:
                    type: string
                    description: Name of system parameter
                  FriendlyName:
                    type: string
                    description: Friendly name of system parameter
                  Description:
                    type: string
                    description: Description of system parameter
                  Value:
                    type: string
                    description: Value of the system parameter
                  createdAt:
                    type: string
                    format: date-time
                    description: Date when the system parameter item was created
                  createdBy:
                    type: string
                    format: uuid
                    description: Unique identifier of user that created system parameter
                  modifiedAt:
                    type: string
                    format: date-time
                    description: Date when the system parameter item was last modified
                  modifiedBy:
                    type: string
                    format: uuid
                    description: Unique identifier of user that last modified it
                  businessId:
                    type: string
                    format: uuid
                    description: Unique identifier of the business
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - sysparams
      summary: Update existing system parameter's value
      description: Updates an existing system parameter's value.
      parameters:
        - name: sysparamId
          in: path
          required: true
          description: Unique identifier of the system parameter item
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  description: New system parameter value
              required:
                - properties
      responses:
        "200":
          description: System parameter item updated successfully
        "400":
          description: Invalid inventory data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Inventory item not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

  /tax:
    post:
      tags:
        - tax
      summary: Create a new tax item
      description: Creates a new tax record.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tax"
      responses:
        "201":
          description: Tax item created successfully
        "400":
          description: Invalid tax data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    get:
      tags:
        - tax
      summary: Retrieve a list of tax items
      description: Fetches a list of tax items.
      parameters:
        - name: resultCount
          in: query
          description: Maximum number of items to return
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Column to order results by
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: ProductId
          in: query
          description: Filter tax by product ID
          required: false
          schema:
            type: string
            format: uuid
        - name: Tax
          in: query
          description: Filter tax by integer value
          required: false
          schema:
            type: integer
        - name: createdAt
          in: query
          description: Filter tax by creation date
          required: false
          schema:
            type: string
            format: date-time
        - name: modifiedAt
          in: query
          description: Filter tax by modification date
          required: false
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: A list of taxes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/tax"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when the tax item was created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when the tax item was last modified
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /tax/{taxId}:
    get:
      tags:
        - tax
      summary: Retrieve a specific tax item by ID
      description: Fetches details of an tax item based on the provided tax ID.
      parameters:
        - name: taxId
          in: path
          required: true
          description: Unique identifier of the tax item
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Tax item details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/tax"
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Date when the tax item was created
                      modifiedAt:
                        type: string
                        format: date-time
                        description: Date when the tax item was last modified
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    put:
      tags:
        - tax
      summary: Update existing tax item
      description: Updates an existing tax item
      parameters:
        - name: taxId
          in: path
          required: true
          description: Unique identifier of the tax item
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tax:
                  type: number
                  format: float
                  description: Tax value
              required:
                - Tax
      responses:
        "200":
          description: Tax item updated successfully
        "400":
          description: Invalid tax data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Tax item not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error

    delete:
      tags:
        - tax
      security:
        - bearerAuth: []
      summary: Delete tax item
      description: Deletes an tax item from the system.
      parameters:
        - name: taxId
          in: path
          required: true
          description: Unique identifier of the tax item
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Tax item removed successfully
        "400":
          description: Invalid request
        "404":
          description: Tax item not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
  /locationProduct:
    post:
      summary: Create a location product
      tags:
        - locationProduct
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/locationProduct'
      responses:
        "201":
          description: Location product created successfully
        "400":
          description: Invalid request
    get:
      tags:
        - locationProduct
      security:
        - bearerAuth: []
      summary: Retrieve a list of location products.
      description: Fetches a list of location products.
      parameters:
        - name: resultCount
          in: query
          description: Maximum number of items to return
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Column to order results by
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: ProductId
          in: query
          description: Filter location products by product ID
          required: false
          schema:
            type: string
            format: uuid
        - name: ProductVariationID
          in: query
          description: Filter location products by product variation ID
          required: false
          schema:
            type: string
            format: uuid
        - name: LocationBusinessID
          in: query
          description: Filter location products by location business ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A list of location products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationProduct'
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
  /locationProduct/{locationProductID}:
    delete:
      tags:
        - locationProduct
      security:
        - bearerAuth: []
      summary: Delete location product
      description: Deletes a location product from the system.
      parameters:
        - name: locationProductID
          in: path
          required: true
          description: Unique identifier of the location product
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Location product item removed successfully
        "400":
          description: Invalid request
        "404":
          description: Location product item not found
        "401":
          description: Unauthenticated user
        "403":
          description: No permission (Only Admin)
        "405":
          description: Method not supported
        "500":
          description: Internal server error
          
  /customer:
    post:
      tags:
        - customer
      security:
        - bearerAuth: []
      summary: Create a new customer
      description: Creates a new customer entry into the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        "201":
          description: Customer created successfully
        "400":
          description: Invalid customer data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    
    get:
      tags:
        - customer
      summary: Get a list of customers.
      description: Gets a list of all customer entries in the system.
      parameters:
      - name: resultCount
        in: query
        description: Maximum number of items to return
        required: true
        schema:
          type: integer
      - name: pageIndex
        in: query
        description: Page index number
        required: true
        schema:
          type: integer
      - name: orderingColumn
        in: query
        description: Column to order results by
        required: true
        schema:
          type: string
      - name: orderingDirection
        in: query
        description: Ordering direction (0 - asc, 1 - desc)
        required: true
        schema:
          type: integer
      - name: CustomerID
        in: query
        description: Filter customers by customer ID
        required: false
        schema:
          type: string
          format: uuid
      - name: CustomerSurname
        in: query
        description: Filter customers by surname
        required: false
        schema:
          type: string
      - name: CustomerPhoneNumber
        in: query
        description: Filter customers by phone number
        required: false
        schema:
          type: string
          format: phone
      responses:
        "200":
          description: A list of customers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/customer"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when customer was first created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when customer was last modified
                        modifiedBy:
                          type: string
                          format: uuid
                          description: ID of the employee who last modified the customer
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /customer/{customerId}:
    put:
      tags:
        - customer
      security:
        - bearerAuth: []
      summary: Update an existing customer
      description: Updates the name, surname, or phone number of an existing customer.
      parameters:
        - name: customerId
          in: path
          description: Unique identifier of customer
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CustomerName:
                  type: string
                  description: New customer name
                CustomerSurname:
                  type: string
                  description: New customer surname
                CustomerPhoneNumber:
                  type: string
                  format: phone
                  description: New customer phone number
              anyOf:
                - required:
                  - CustomerName
                - required:
                  - CustomerSurname
                - required:
                  - CustomerPhoneNumber
      responses:
        "200":
          description: Customer updated successfully
        "400":
          description: Invalid request or customer data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Customer not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
          
    delete:
      tags:
        - customer
      security:
        - bearerAuth: []
      summary: Delete an existing customer
      description: Deletes a customer from the system.
      parameters:
        - name: customerId
          in: path
          description: Unique identifier of the customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Customer deleted successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Customer not found
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
  /productTaxRow:
    post:
      tags:
        - productTaxRow
      security:
        - bearerAuth: []
      summary: Create a new product tax row
      description: Creates a new product tax row entry into the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productTaxRow"
      responses:
        "201":
          description: Product tax row created successfully
        "400":
          description: Invalid product tax data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
          
    get:
      tags:
        - productTaxRow
      summary: Retrieve a list of product tax rows
      description: Retrieves a list of product tax rows based on provided criteria.
      parameters:
      - name: resultCount
        in: query
        description: Maximum number of items to return
        required: true
        schema:
          type: integer
      - name: pageIndex
        in: query
        description: Page index number
        required: true
        schema:
          type: integer
      - name: orderingColumn
        in: query
        description: Column to order results by
        required: true
        schema:
          type: string
      - name: orderingDirection
        in: query
        description: Ordering direction (0 - asc, 1 - desc)
        required: true
        schema:
          type: integer
      - name: TaxID
        in: query
        description: Filter product tax rows by Tax ID
        required: false
        schema:
          type: string
          format: uuid
      - name: ProductID
        in: query
        description: Filter product tax rows by product ID
        required: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A list of product tax rows retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/productTaxRow"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when product tax row was first created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when product tax row was last modified
                        modifiedBy:
                          type: string
                          format: uuid
                          description: ID of the employee who last modified the product tax row
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
  /productTaxRow/{productTaxRowID}:
    get:
      tags:
        - productTaxRow
      summary: Retrieve a specific product tax row
      description: Retrieves a product tax row by the specified product tax row iD.
      parameters:
        - name: productTaxRowID
          in: path
          required: true
          description: Unique identifier of the product tax row
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product tax row details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/productTaxRow"
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Date when the inventory item was created
                      modifiedAt:
                        type: string
                        format: date-time
                        description: Date when the inventory item was last modified
                      modifiedBy:
                        type: string
                        format: uuid
                        description: ID of the employee who last modified the product tax row
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    delete:
      tags:
        - productTaxRow
      security:
        - bearerAuth: []
      summary: Delete an existing product tax row
      description: Deletes a product tax row from the system.
      parameters:
        - name: productTaxRowID
          in: path
          description: Unique identifier of the product tax row
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Product tax row deleted successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Product tax row not found
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /serviceTaxRow:
    post:
      tags:
        - serviceTaxRow
      security:
        - bearerAuth: []
      summary: Create a new service tax row
      description: Creates a new service tax row entry into the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/serviceTaxRow"
      responses:
        "201":
          description: Service tax row created successfully
        "400":
          description: Invalid product tax data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
          
    get:
      tags:
        - serviceTaxRow
      summary: Retrieve a list of service tax rows
      description: Retrieves a list of service tax rows based on provided criteria.
      parameters:
      - name: resultCount
        in: query
        description: Maximum number of items to return
        required: true
        schema:
          type: integer
      - name: pageIndex
        in: query
        description: Page index number
        required: true
        schema:
          type: integer
      - name: orderingColumn
        in: query
        description: Column to order results by
        required: true
        schema:
          type: string
      - name: orderingDirection
        in: query
        description: Ordering direction (0 - asc, 1 - desc)
        required: true
        schema:
          type: integer
      - name: TaxID
        in: query
        description: Filter service tax rows by Tax ID
        required: false
        schema:
          type: string
          format: uuid
      - name: ServiceID
        in: query
        description: Filter service tax rows by service ID
        required: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: A list of service tax rows retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/serviceTaxRow"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when product tax row was first created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when product tax row was last modified
                        modifiedBy:
                          type: string
                          format: uuid
                          description: ID of the employee who last modified the product tax row
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
  /serviceTaxRow/{serviceTaxRowID}:
    get:
      tags:
        - serviceTaxRow
      summary: Retrieve a specific service tax row
      description: Retrieves a service tax row by the specified product tax row iD.
      parameters:
        - name: serviceTaxRowID
          in: path
          required: true
          description: Unique identifier of the service tax row
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Service tax row details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/serviceTaxRow"
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Date when the inventory item was created
                      modifiedAt:
                        type: string
                        format: date-time
                        description: Date when the inventory item was last modified
                      modifiedBy:
                        type: string
                        format: uuid
                        description: ID of the employee who last modified the service tax row
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

    delete:
      tags:
        - serviceTaxRow
      security:
        - bearerAuth: []
      summary: Delete an existing service tax row
      description: Deletes a service tax row from the system.
      parameters:
        - name: serviceTaxRowID
          in: path
          description: Unique identifier of the service tax row
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Service tax row deleted successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Service tax row not found
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
  /contactInfo:
    post:
      tags:
        - contactInfo
      security:
        - bearerAuth: []
      summary: Create a new contact info entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/contactInfo"
      responses:
        "201":
          description: Contact info created successfully
        "400":
          description: Invalid contact info data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    
    get:
      tags:
        - contactInfo
      summary: Retrieve a list of contact info entries
      parameters:
      - name: resultCount
        in: query
        description: Maximum number of items to return
        required: true
        schema:
          type: integer
      - name: pageIndex
        in: query
        description: Page index number
        required: true
        schema:
          type: integer
      - name: orderingColumn
        in: query
        description: Column to order results by
        required: true
        schema:
          type: string
      - name: orderingDirection
        in: query
        description: Ordering direction (0 - asc, 1 - desc)
        required: true
        schema:
          type: integer
      - name: Country
        in: query
        description: Filter contact info by country
        required: false
        schema:
          type: string
      - name: City
        in: query
        description: Filter contact info by city
        required: false
        schema:
          type: string
      - name: PhoneNumber
        in: query
        description: Filter contact info by phone number
        required: false
        schema:
          type: string
          format: phone
      - name: Email
        in: query
        description: Filter contact info by email
        required: false
        schema:
          type: string
          format: email
      - name: PostCode
        in: query
        description: Filter contact info by postcode
        required: false
        schema:
          type: string
      responses:
        "200":
          description: A list of contact info retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/contactInfo"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when contact info was first created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when contact info was last modified
                        modifiedBy:
                          type: string
                          format: uuid
                          description: ID of the employee who last modified the contact info
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /contactInfo/{contactInfoID}:
    get:
      tags:
        - contactInfo
      summary: Retrieve a specific contact info item by ID
      description: Fetches details of a contact info item based on the provided contact info ID.
      parameters:
        - name: contactInfoID
          in: path
          required: true
          description: Unique identifier of the contact info item
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Contact info item details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/contactInfo"
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Date when the contact info item was created
                      modifiedAt:
                        type: string
                        format: date-time
                        description: Date when the contact info item was last modified
                      modifiedBy:
                        type: string
                        format: uuid
                        description: ID of the employee who last modified the contact info
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
          
    put:
      tags:
        - contactInfo
      security:
        - bearerAuth: []
      summary: Update an existing contact info
      description: Updates the country, city, street, number, postcode, phone or email of a contact info item.
      parameters:
        - name: contactInfoID
          in: path
          description: Unique identifier of contact info item.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Country:
                  type: string
                  description: New country
                City:
                  type: string
                  description: New city
                Street:
                  type: string
                  description: New street
                Number:
                  type: string
                  description: New street number
                PostCode:
                  type: string
                  description: New post code
                Phone:
                  type: string
                  format: phone
                  description: New phone number
                Email:
                  type: string
                  format: email
                  description: New email
              anyOf:
                - required:
                  - Country
                - required:
                  - City
                - required:
                  - Street
                - required:
                  - Number
                - required:
                  - PostCode
                - required:
                  - Phone
                - required:
                  - Email
      responses:
        "200":
          description: Contact info updated successfully
        "400":
          description: Invalid request or cotnact info data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Contact info not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
          
    delete:
      tags:
        - contactInfo
      security:
        - bearerAuth: []
      summary: Delete an existing contact info item
      description: Deletes a contact info item from the system.
      parameters:
        - name: contactInfoID
          in: path
          description: Unique identifier of the contact info item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Contact info item deleted successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Contact info not found
        "405":
          description: Method not supported
        "500":
          description: Internal server error
          
  /service:
    post:
      tags:
        - service
      security:
        - bearerAuth: []
      summary: Create a new service entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/service"
      responses:
        "201":
          description: Service created successfully
        "400":
          description: Invalid service data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    
    get:
      tags:
        - service
      summary: Retrieve a list of service entries
      parameters:
      - name: resultCount
        in: query
        description: Maximum number of items to return
        required: true
        schema:
          type: integer
      - name: pageIndex
        in: query
        description: Page index number
        required: true
        schema:
          type: integer
      - name: orderingColumn
        in: query
        description: Column to order results by
        required: true
        schema:
          type: string
      - name: orderingDirection
        in: query
        description: Ordering direction (0 - asc, 1 - desc)
        required: true
        schema:
          type: integer
      - name: LocationID
        in: query
        description: Filter services by location
        required: false
        schema:
          type: string
          format: uuid
      - name: Name
        in: query
        description: Filter services by name
        required: false
        schema:
          type: string
      - name: Duration
        in: query
        description: Filter services by duration (in minutes)
        required: false
        schema:
          type: integer
      - name: Price
        in: query
        description: Filter services by price
        required: false
        schema:
          type: number
          format: double
      responses:
        "200":
          description: A list of contact info retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/service"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when service was first created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when service was last modified
                        modifiedBy:
                          type: string
                          format: uuid
                          description: ID of the employee who last modified the service
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error

  /service/{serviceID}:
    get:
      tags:
        - service
      summary: Retrieve a specific service item by ID
      description: Fetches details of a service item based on the provided service ID.
      parameters:
        - name: serviceID
          in: path
          required: true
          description: Unique identifier of the service item
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Service item details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/service"
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Date when the service item was created
                      modifiedAt:
                        type: string
                        format: date-time
                        description: Date when the service item was last modified
                      modifiedBy:
                        type: string
                        format: uuid
                        description: ID of the employee who last modified the service
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
          
    put:
      tags:
        - service
      security:
        - bearerAuth: []
      summary: Update an existing service
      description: Updates the name, duration or price of an existing service
      parameters:
        - name: serviceID
          in: path
          description: Unique identifier of service item.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  description: New name
                Duration:
                  type: integer
                  description: New duration (in minutes)
                Price:
                  type: number
                  format: double
                  description: New price of the service
              anyOf:
                - required:
                  - Name
                - required:
                  - Duration
                - required:
                  - Street
      responses:
        "200":
          description: Service updated successfully
        "400":
          description: Invalid request or Service data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Service info not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
          
    delete:
      tags:
        - service
      security:
        - bearerAuth: []
      summary: Delete an existing service item
      description: Deletes a service item from the system.
      parameters:
        - name: serviceID
          in: path
          description: Unique identifier of the service item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Service item deleted successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Service not found
        "405":
          description: Method not supported
        "500":
          description: Internal server error
          
  /locationBusiness:
    post:
      tags:
        - locationBusiness
      security:
        - bearerAuth: []
      summary: Create a new location business entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/locationBusiness"
      responses:
        "201":
          description: Location business created successfully
        "400":
          description: Invalid location business data
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
    
    get:
      tags:
        - locationBusiness
      summary: Retrieve a list of location business entries
      parameters:
        - name: resultCount
          in: query
          description: Maximum number of items to return
          required: true
          schema:
            type: integer
        - name: pageIndex
          in: query
          description: Page index number
          required: true
          schema:
            type: integer
        - name: orderingColumn
          in: query
          description: Column to order results by
          required: true
          schema:
            type: string
        - name: orderingDirection
          in: query
          description: Ordering direction (0 - asc, 1 - desc)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: Filter locations by name
          required: false
          schema:
            type: string
        - name: code
          in: query
          description: Filter locations by code
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: A list of location business entries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/locationBusiness"
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          description: Date when location business was first created
                        modifiedAt:
                          type: string
                          format: date-time
                          description: Date when location business was last modified
                        modifiedBy:
                          type: string
                          format: uuid
                          description: ID of the employee who last modified the location business
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
  /locationBusiness/{locationBusinessID}:
    get:
      tags:
        - locationBusiness
      summary: Retrieve a specific location business item by ID
      description: Fetches details of a location business based on the provided locationBusinessID.
      parameters:
        - name: locationBusinessID
          in: path
          required: true
          description: Unique identifier of the location business item
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Location business item details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/locationBusiness"
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        format: date-time
                        description: Date when the location business item was created
                      modifiedAt:
                        type: string
                        format: date-time
                        description: Date when the location business item was last modified
                      modifiedBy:
                        type: string
                        format: uuid
                        description: ID of the employee who last modified the location business
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "405":
          description: Method not supported
        "500":
          description: Internal server error
  
    put:
      tags:
        - locationBusiness
      security:
        - bearerAuth: []
      summary: Update an existing location business
      description: Updates the code or name of an existing location business.
      parameters:
        - name: locationBusinessID
          in: path
          description: Unique identifier of location business item
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: integer
                  description: New location code
                name:
                  type: string
                  description: New location name
              anyOf:
                - required:
                  - code
                - required:
                  - name
      responses:
        "200":
          description: Location business updated successfully
        "400":
          description: Invalid request or location business data
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Location business not found
        "405":
          description: Method not supported
        "422":
          description: Invalid data
        "500":
          description: Internal server error
  
    delete:
      tags:
        - locationBusiness
      security:
        - bearerAuth: []
      summary: Delete an existing location business
      description: Deletes a location business item from the system.
      parameters:
        - name: locationBusinessID
          in: path
          description: Unique identifier of the location business item
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Location business item deleted successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthenticated user
        "403":
          description: No permission
        "404":
          description: Location business not found
        "405":
          description: Method not supported
        "500":
          description: Internal server error


components:
  schemas:
    workingHours:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Primary key for the working hours entry"
        locationId:
          type: string
          format: uuid
          description: "Foreign key for the location"
        dayOfWeek:
          type: integer
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          description: "Day of the week"
        endTime:
          type: string
          format: time
          description: "The end time for the working hours"
      required:
        - id
        - locationId
        - dayOfWeek
        - endTime
    locationProduct:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        productVariationId:
          type: string
          format: uuid
        locationId:
          type: string
          format: uuid
      required:
        - productId
        - productVariationId
        - locationId
    product:
      type: object
      properties:
        name:
          type: string
          description: Product name
        price:
          type: number
          format: double
          description: Product price without tax
        createdBy:
          type: string
          format: uuid
          description: ID of the employee who created the product
        businessId:
          type: string
          format: uuid
          description: ID of the business to which the product belongs
        taxId:
          type: string
          format: uuid
          description: ID of the tax that is applied to this product
        locationBusinessId:
          type: string
          format: uuid
          description: ID of the business' location to which the product belongs
      required:
        - name
        - taxId
        - price
        - createdBy
        - businessId
        - locationBusinessId
    user:
      type: object
      properties:
        username:
          type: string
          description: Username
        passwordHash:
          type: string
          description: Hashed user password
        email:
          type: string
          description: User email address
      required:
        - username
        - passwordHash
        - email
    customer:
      type: object
      properties:
        name:
          type: string
          description: Customer first name
        surname:
          type: string
          description: Customer surname
        phoneNumber:
          type: string
          format: phone
          description: Customer phone number
    tax:
      type: object
      properties:
        Tax:
          type: number
          format: double
          description: Tax amount
        description:
          type: string
          description: Description of the tax
    productTaxRow:
      type: object
      properties:
        taxId:
          type: string
          format: uuid
          description: ID of the tax
        productId:
          type: string
          format: uuid
          description: ID of the product
    serviceTaxRow:
      type: object
      properties:
        taxId:
          type: string
          format: uuid
          description: ID of the tax
        serviceId:
          type: string
          format: uuid
          description: ID of the service
    contactInfo:
      type: object
      properties:
        country:
          type: string
        city:
          type: string
        street:
          type: string
        number:
          type: integer
        postcode:
          type: string
        phone:
          type: string
          format: phone
        email:
          type: string
          format: email
    service:
      type: object
      properties:
        locationId:
          type: string
          format: uuid
          description: Location ID of where the service is offered
        name:
          type: string
          description: Name of the service
        duration:
          type: integer
          description: Duration of the service in minutes.
        price:
          type: number
          format: double
          description: Price of the service.
    locationBusiness:
      type: object
      properties:
        code:
          type: integer
          description: Location code
        name:
          type: string
          description: Location name
        contactInfoID:
          type: string
          format: uuid
        businessID:
          type: string
          format: uuid
    
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
